'use strict';

const DiaryEntry = require('../../models/diary-entry');

class LetterboxdDiaryRss {
    constructor(axios, htmlParser2) {
        this.axios = axios;
        this.htmlParser2 = htmlParser2;
    }

    get(userName, count) {
        return new Promise((resolve, reject) => {
            this.axios
                .get(`https://letterboxd.com/${userName}/rss/`, {
                    headers: {
                        'User-Agent': 'Filmlinkd - A Letterboxd Discord Bot',
                    },
                })
                .then((response) => {
                    resolve(this.parseRss(response.data, count));
                })
                .catch(reject);
        });
    }

    parseRss(responseText, count) {
        const dom = this.htmlParser2.parseDocument(responseText, { xmlMode: true });
        const itemList = this.htmlParser2.DomUtils.getElementsByTagName('item', dom);

        const entryList = [];
        const linkList = [];
        for (let i = 0; i < itemList.length; i++) {
            // If it doesn't have a film title then we don't care about it. Ignore it.
            const filmTitle = this.getFilmTitle(itemList[i]);
            if (!filmTitle) continue;

            entryList.push(this.createEntry(itemList[i]));
            linkList.push(filmLink);

            // Once we hit the number we want, stop processing data
            if (entryList.length >= count) {
                break;
            }
        }

        return entryList;
    }

    createEntry(item) {
        const description = this.getDescriptionDom(item);

        const diaryEntry = new DiaryEntry();
        diaryEntry.id = this.getId(item);
        diaryEntry.type = this.getType(item);
        diaryEntry.link = this.getLink(item);
        diaryEntry.publishedDate = this.getPublishedDate(item);
        diaryEntry.filmTitle = this.getFilmTitle(item);
        diaryEntry.filmYear = this.getFilmYear(item);
        diaryEntry.watchedDate = this.getWatchedDate(item);
        diaryEntry.image = this.getImage(description);
        diaryEntry.stars = this.getStars(item);
        diaryEntry.rewatch = this.getRewatch(item);
        diaryEntry.containsSpoilers = this.getContainsSpoilers(item);
        diaryEntry.review = this.getReview(description);

        return diaryEntry;
    }

    getDescriptionDom(item) {
        const descriptionHtml = this.getTextFromTag('description', item);
        return this.htmlParser2.parseDocument(descriptionHtml, { xmlMode: true });
    }

    getId(item) {
        const results = this.getTextFromTag('guid', item).match(/letterboxd-.*-(\d+)/);
        return parseInt(results[1]);
    }

    getType(item) {
        const results = this.getTextFromTag('guid', item).match(/letterboxd-(.*)-\d+/);
        return results[1];
    }

    getLink(item) {
        return this.getTextFromTag('link', item);
    }

    getPublishedDate(item) {
        const pubDateString = this.getTextFromTag('pubDate', item);
        return new Date(pubDateString).getTime();
    }

    getWatchedDate(item) {
        const watchedDateString = this.getTextFromTag('letterboxd:watchedDate', item);
        if (!watchedDateString) {
            return 0;
        }

        return new Date(watchedDateString).getTime();
    }

    getFilmTitle(item) {
        return this.getTextFromTag('letterboxd:filmTitle', item);
    }

    getFilmYear(item) {
        return parseInt(this.getTextFromTag('letterboxd:filmYear', item));
    }

    getImage(item) {
        const elements = this.htmlParser2.DomUtils.getElementsByTagName('img', item);
        if (!elements.length) {
            return '';
        }
        return this.htmlParser2.DomUtils.getAttributeValue(elements[0], 'src') || '';
    }

    getStars(item) {
        const rating = this.getTextFromTag('letterboxd:memberRating', item);
        const map = {
            0.5: '½',
            '1.0': '★',
            1.5: '★½',
            '2.0': '★★',
            2.5: '★★½',
            '3.0': '★★★',
            3.5: '★★★½',
            '4.0': '★★★★',
            4.5: '★★★★½',
            '5.0': '★★★★★',
        };
        return map[rating] || '';
    }

    getRewatch(item) {
        return this.getTextFromTag('letterboxd:rewatch', item) === 'Yes';
    }

    getReview(item) {
        const paragraphs = this.htmlParser2.DomUtils.getElementsByTagName('p', item);
        return paragraphs
            .reduce((accumulator, currentValue) => {
                const paragraphText = this.htmlParser2.DomUtils.getText(currentValue).trim();
                // Don't add an autogenerated paragraphs that say there are spoilers
                if (paragraphText == 'This review may contain spoilers.') {
                    return accumulator;
                }
                // Don't add any autogenerated paragraphs that say when it was watched
                const regex = /^Watched on .+day \w+ \d+, \d{4}\.$/g;
                if (paragraphText.match(regex)) {
                    return accumulator;
                }

                return accumulator + '\n' + paragraphText;
            }, '')
            .trim();
    }

    getContainsSpoilers(item) {
        return this.getTextFromTag('title', item).includes('(contains spoilers)');
    }

    getTextFromTag(tag, item) {
        const elements = this.htmlParser2.DomUtils.getElementsByTagName(tag, item);
        if (!elements.length) {
            return '';
        }

        return this.htmlParser2.DomUtils.getText(elements[0]);
    }
}

module.exports = LetterboxdDiaryRss;
